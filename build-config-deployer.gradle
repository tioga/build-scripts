apply plugin: "maven"
apply plugin: "signing"

uploadArchives.dependsOn install

signing {
  sign configurations.archives
}

task (uploadArchivesTest) << {
  try {
    System.out.flush();
    System.err.flush();
  
    String group = project.group.replace(".", "/")
    new URL("https://repo1.maven.org/maven2/"+group+"/"+project.name+"/"+project.version+"/"+project.name+"-"+project.version+".pom").getText()

    Set<String> diffs = comparePoms(project);
    if (diffs.isEmpty()) {
      System.out.printf("*** Already Exists: $project.group:$project.name:$project.version%n");
    } else {
      System.err.printf("***%n*** Mismatches in $project.group:$project.name:$project.version.%n");
      for (String diff : diffs) System.err.printf("***   %s%n", diff);
      System.err.printf("***%n");
    }
    
  } catch (FileNotFoundException ignored) {
    System.out.printf("*** Not Found: $project.group:$project.name:$project.version%n");
  }
}

uploadArchives {
  doFirst() {
    try {
      System.out.flush();
      System.err.flush();

      String group = project.group.replace(".", "/")
      new URL("https://repo1.maven.org/maven2/"+group+"/"+project.name+"/"+project.version+"/"+project.name+"-"+project.version+".pom").getText()

      Set<String> diffs = comparePoms(project);
      if (diffs.isEmpty()) System.err.printf("***%n*** Already Exists: $project.group:$project.name:$project.version%n");
      else System.err.printf("***%n*** Mismatches in $project.group:$project.name:$project.version.%n");

      for (String diff : diffs) System.err.printf("***   %s%n", diff);
      System.err.printf("***%n");

      throw new StopExecutionException(String.format("%s:%s:%s already exists.", project.group, project.name, project.version));
      
    } catch (FileNotFoundException ignored) {/* It's OK to deploy */}
  }
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: sonatypeUsername, password: sonatypePassword)
      }

      pom.groupId = project.group
      pom.artifactId = project.name
      pom.version = project.version
      pom.packaging = 'jar'
      pom.project {
        name = project.name
        description = pomProjectDescription
        url = pomUrl
        licenses {
          license {
            name = 'Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0'
            distribution = 'repo'
          }
        }
        scm {
          url = pomScmUrl
          connection = pomScmConnection
        }
        developers {[
          developer {
            id = 'SireInsectus'
            name = 'Jacob D. Parr'
            email = 'me@jacobparr.com'
          },
          developer {
            id = 'harlan'
            name = 'Harlan'
            email = 'harlan.work@gmail.com'
          }]
        }
      }
    }
  }
}

private Set<String> comparePoms(project) {
  String group = project.group.replace(".", "/")

  String oldPom = new URL("https://repo1.maven.org/maven2/"+group+"/"+project.name+"/"+project.version+"/"+project.name+"-"+project.version+".pom").text
  Map<String,String> oldDependencies = parseDependencies(oldPom);

  String newPom = file("build\\poms\\pom-default.xml").text
  Map<String,String> newDependencies = parseDependencies(newPom);

  Set<String> missing = new TreeSet<>();

  for (String key : oldDependencies.keySet()) {
    String oldVal = oldDependencies.get(key);
    String newVal = newDependencies.get(key);
    if (oldVal != newVal) missing.add(String.format("%s vs %s %s", oldVal, newVal, key))
  }

  for (String key : newDependencies.keySet()) {
    String oldVal = oldDependencies.get(key);
    String newVal = newDependencies.get(key);
    if (oldVal != newVal) missing.add(String.format("%s vs %s %s", oldVal, newVal, key))
  }

  return missing;
}

private Map<String,String> parseDependencies(String text) {

  Map<String,String> map = new HashMap<>();

  text = getTags(text, "dependencies").get(0);

  List<String> dependencies = getTags(text, "dependency");

  for (String dependency : dependencies) {

    List<String> tags = getTags(dependency, "groupId");
    String groupId = tags.size() == 0 ? null : tags.get(0);

    tags = getTags(dependency, "artifactId");
    String artifactId = tags.size() == 0 ? null : tags.get(0);

    tags = getTags(dependency, "version");
    String version = tags.size() == 0 ? null : tags.get(0);

    tags = getTags(dependency, "scope");
    String scope = tags.size() == 0 ? "compile" : tags.get(0);
    scope = "compile".equals(scope) ? "" : "["+scope+"]"

    String key = groupId+":"+artifactId
    String value = version+scope;
    map.put(key, value)
  }

  return map;
}

private List<String> getTags(String text, String tagName) {
  List<String> tags = new ArrayList<>();

  int posA = text.indexOf("<$tagName>")
  int posB = text.indexOf("</$tagName>", posA)

  while (posA >=0 && posB >= 0) {
    String content = text.substring(posA+2+tagName.length(), posB)
    tags.add(content)

    posA = text.indexOf("<$tagName>", posB)
    posB = text.indexOf("</$tagName>", posA)
  }

  return tags
}
