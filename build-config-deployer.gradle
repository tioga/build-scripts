apply plugin: "maven"

if (System.getenv("TIOGA_SIGNING_KEY_ID") == null) {
	System.err.println("Skipping signature");
} else {
  apply plugin: "signing"
  signing {
    sign configurations.archives
  }
  gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
      allprojects { ext."signing.keyId" =             System.getenv("TIOGA_SIGNING_KEY_ID") }
      allprojects { ext."signing.password" =          System.getenv("TIOGA_SIGNING_PASSWORD") }
      allprojects { ext."signing.secretKeyRingFile" = System.getenv("TIOGA_SIGNING_FILE") }
    }
  }
}

task uploadArchivesTest(dependsOn: install) << {

  try {
    // We don't bother validating against central because it will always exist in 
    // sonatype before it ever makes it central, usually imeadiately after publishing.
    testRepo("https://oss.sonatype.org/content/repositories/releases");
    return; // The artifact was found.
  } catch (FileNotFoundException ignored) {
    System.out.printf("*** Not Found: $project.group:$project.name:$project.version%n");
  }
}

private testRepo(String repo) {
  System.out.flush();
  System.err.flush(); 

  String group = project.group.replace(".", "/")
  new URL("$repo/"+group+"/"+project.name+"/"+project.version+"/"+project.name+"-"+project.version+".pom").getText()

  Set<String> diffs = comparePoms(repo, project);
  if (diffs.isEmpty()) {
    System.out.printf("*** Already Exists: $project.group:$project.name:$project.version ($repo)%n");
    
  } else {
    System.err.printf("***%n*** Mismatches in $project.group:$project.name:$project.version ($repo)%n");
    for (String diff : diffs) System.err.printf("***   %s%n", diff);
    System.err.printf("***%n");
  }
}

install {
  repositories.mavenInstaller {
    pom.withXml {
      updatePom(it.asString())
    }
  }
}

uploadArchives {
  doFirst() {
    try {
      System.out.flush();
      System.err.flush();
      
      String group = project.group.replace(".", "/")
      // We don't bother validating against central because it will always exist in 
      // sonatype before it ever makes it central, usually imeadiately after publishing.
      String repo = "https://oss.sonatype.org/content/repositories/releases";

      Set<String> diffs = comparePoms(repo, project);
      if (diffs.isEmpty()) System.err.printf("***%n*** Already Exists: $project.group:$project.name:$project.version%n");
      else System.err.printf("***%n*** Mismatches in $project.group:$project.name:$project.version.%n");

      for (String diff : diffs) System.err.printf("***   %s%n", diff);
      System.err.printf("***%n");

      throw new StopExecutionException(String.format("%s:%s:%s already exists.", project.group, project.name, project.version));
      
    } catch (FileNotFoundException ignored) {/* It's OK to deploy */}
  }
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: System.getenv("TIOGA_SONATYPE_USERNAME"), 
                       password: System.getenv("TIOGA_SONATYPE_PASSWORD"));
      }
      
      pom.groupId = project.group
      pom.artifactId = project.name
      pom.version = project.version
      pom.packaging = 'jar'
      pom.project {
        name = project.name
        description = pomProjectDescription
        url = pomUrl
        licenses {
          license {
            name = 'Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0'
            distribution = 'repo'
          }
        }
        scm {
          url = pomScmUrl
          connection = pomScmConnection
        }
        developers {[
          developer {
            id = 'SireInsectus'
            name = 'Jacob D. Parr'
            email = 'me@jacobparr.com'
          },
          developer {
            id = 'harlan'
            name = 'Harlan'
            email = 'harlan.work@gmail.com'
          }]
        }
      }
      pom.withXml {
        updatePom(it.asString())
      }
    }
  }
}

private void updatePom(StringBuilder builder) {
  String pom = builder.toString()
  pom = pom.replace("<version>+</version>", "<version>RELEASE</version>");
  builder.replace(0, builder.length(), pom)
}

private Set<String> comparePoms(repo, project) {
  String group = project.group.replace(".", "/")

  String oldPom = new URL("$repo/"+group+"/"+project.name+"/"+project.version+"/"+project.name+"-"+project.version+".pom").text
  Map<String,String> oldDependencies = parseDependencies(oldPom);

  String newPom;
  File localFile = file("build/poms/pom-default.xml")
  try {
    newPom = localFile.text
  } catch (FileNotFoundException ex) {
    throw new IOException("Could not find build file: " + localFile);
  }
  Map<String,String> newDependencies = parseDependencies(newPom);

  Set<String> missing = new TreeSet<>();

  for (String key : oldDependencies.keySet()) {
    String oldVal = oldDependencies.get(key);
    String newVal = newDependencies.get(key);
    if (oldVal != newVal) missing.add(String.format("%s vs %s %s", oldVal, newVal, key))
  }

  for (String key : newDependencies.keySet()) {
    String oldVal = oldDependencies.get(key);
    String newVal = newDependencies.get(key);
    if (oldVal != newVal) missing.add(String.format("%s vs %s %s", oldVal, newVal, key))
  }

  return missing;
}

private Map<String,String> parseDependencies(String text) {

  Map<String,String> map = new HashMap<>();

  text = getTags(text, "dependencies").get(0);

  List<String> dependencies = getTags(text, "dependency");

  for (String dependency : dependencies) {

    List<String> tags = getTags(dependency, "groupId");
    String groupId = tags.size() == 0 ? null : tags.get(0);

    tags = getTags(dependency, "artifactId");
    String artifactId = tags.size() == 0 ? null : tags.get(0);

    tags = getTags(dependency, "version");
    String version = tags.size() == 0 ? null : tags.get(0);

    tags = getTags(dependency, "scope");
    String scope = tags.size() == 0 ? "compile" : tags.get(0);
    scope = "compile".equals(scope) ? "" : "["+scope+"]"

    String key = groupId+":"+artifactId
    String value = version+scope;
    map.put(key, value)
  }

  return map;
}

private List<String> getTags(String text, String tagName) {
  List<String> tags = new ArrayList<>();

  int posA = text.indexOf("<$tagName>")
  int posB = text.indexOf("</$tagName>", posA)

  while (posA >=0 && posB >= 0) {
    String content = text.substring(posA+2+tagName.length(), posB)
    tags.add(content)

    posA = text.indexOf("<$tagName>", posB)
    posB = text.indexOf("</$tagName>", posA)
  }

  return tags
}

class FileBinaryCategory{   
    def static leftShift(File file, URL url){   
       url.withInputStream {is->
            file.withOutputStream {os->
                def bs = new BufferedOutputStream( os )
                bs << is                   
            }
        }
    }   
}
